use enigo::{Key, MouseButton};
use crate::canonicalize::declare::{CanonicalButton, CanonicalKey};

impl From<Key> for CanonicalKey {
    fn from(value: Key) -> Self {
        match value {
            // Function keys  -- 16
            Key::Escape => CanonicalKey::Escape,
            Key::F1 => CanonicalKey::F1,
            Key::F2 => CanonicalKey::F2,
            Key::F3 => CanonicalKey::F3,
            Key::F4 => CanonicalKey::F4,
            Key::F5 => CanonicalKey::F5,
            Key::F6 => CanonicalKey::F6,
            Key::F7 => CanonicalKey::F7,
            Key::F8 => CanonicalKey::F8,
            Key::F9 => CanonicalKey::F9,
            Key::F10 => CanonicalKey::F10,
            Key::F11 => CanonicalKey::F11,
            Key::F12 => CanonicalKey::F12,
            Key::Print => CanonicalKey::PrtSc,
            Key::Scroll => CanonicalKey::ScrLk,
            Key::Pause => CanonicalKey::Pause,
            // NumPad keys -- 17
            Key::Numpad0 => CanonicalKey::NumPad0,
            Key::Numpad1 => CanonicalKey::NumPad1,
            Key::Numpad2 => CanonicalKey::NumPad2,
            Key::Numpad3 => CanonicalKey::NumPad3,
            Key::Numpad4 => CanonicalKey::NumPad4,
            Key::Numpad5 => CanonicalKey::NumPad5,
            Key::Numpad6 => CanonicalKey::NumPad6,
            Key::Numpad7 => CanonicalKey::NumPad7,
            Key::Numpad8 => CanonicalKey::NumPad8,
            Key::Numpad9 => CanonicalKey::NumPad9,
            Key::Numlock => CanonicalKey::NumLock,
            Key::Divide => CanonicalKey::NumPadDivide,
            Key::Multiply => CanonicalKey::NumPadMultiply,
            Key::Subtract => CanonicalKey::NumPadMinus,
            Key::Add => CanonicalKey::NumPadPlus,
            Key::Separator => CanonicalKey::NumPadEnter,
            Key::Decimal => CanonicalKey::NumPadDot,
            // Navigation & Arrow keys -- 10
            Key::Insert => CanonicalKey::Insert,
            Key::Delete => CanonicalKey::Delete,
            Key::Home => CanonicalKey::Home,
            Key::End => CanonicalKey::End,
            Key::PageUp => CanonicalKey::PageUp,
            Key::PageDown => CanonicalKey::PageDown,
            Key::UpArrow => CanonicalKey::ArrowUp,
            Key::DownArrow => CanonicalKey::ArrowDown,
            Key::LeftArrow => CanonicalKey::ArrowLeft,
            Key::RightArrow => CanonicalKey::ArrowRight,
            // Modifier keys -- 13
            Key::Tab => CanonicalKey::Tab,
            Key::CapsLock => CanonicalKey::CapsLock,
            Key::LShift => CanonicalKey::LShift,
            Key::RShift => CanonicalKey::RShift,
            Key::LControl => CanonicalKey::LCtrl,
            Key::RControl => CanonicalKey::RCtrl,
            /// note: 'alt' on windows and linux, 'option' on mac
            Key::LMenu => CanonicalKey::LAlt,
            /// note: 'alt' on windows and linux, 'option' on mac
            Key::RMenu => CanonicalKey::RAlt,
            /// note: 'command' on mac, 'windows' on windows, 'super' on linux
            Key::LWin => CanonicalKey::LMeta,
            /// note: 'command' on mac, 'windows' on windows, 'super' on linux
            Key::RWin => CanonicalKey::RMeta,
            /// note: 'menu' on windows
            Key::Apps => CanonicalKey::Menu,
            Key::Return => CanonicalKey::Enter,
            Key::Backspace => CanonicalKey::Backspace,
            // Printable keys -- 48
            Key::A => CanonicalKey::KeyA,
            Key::B => CanonicalKey::KeyB,
            Key::C => CanonicalKey::KeyC,
            Key::D => CanonicalKey::KeyD,
            Key::E => CanonicalKey::KeyE,
            Key::F => CanonicalKey::KeyF,
            Key::G => CanonicalKey::KeyG,
            Key::H => CanonicalKey::KeyH,
            Key::I => CanonicalKey::KeyI,
            Key::J => CanonicalKey::KeyJ,
            Key::K => CanonicalKey::KeyK,
            Key::L => CanonicalKey::KeyL,
            Key::M => CanonicalKey::KeyM,
            Key::N => CanonicalKey::KeyN,
            Key::O => CanonicalKey::KeyO,
            Key::P => CanonicalKey::KeyP,
            Key::Q => CanonicalKey::KeyQ,
            Key::R => CanonicalKey::KeyR,
            Key::S => CanonicalKey::KeyS,
            Key::T => CanonicalKey::KeyT,
            Key::U => CanonicalKey::KeyU,
            Key::V => CanonicalKey::KeyV,
            Key::W => CanonicalKey::KeyW,
            Key::X => CanonicalKey::KeyX,
            Key::Y => CanonicalKey::KeyY,
            Key::Z => CanonicalKey::KeyZ,
            Key::Num0 => CanonicalKey::Num0,
            Key::Num1 => CanonicalKey::Num1,
            Key::Num2 => CanonicalKey::Num2,
            Key::Num3 => CanonicalKey::Num3,
            Key::Num4 => CanonicalKey::Num4,
            Key::Num5 => CanonicalKey::Num5,
            Key::Num6 => CanonicalKey::Num6,
            Key::Num7 => CanonicalKey::Num7,
            Key::Num8 => CanonicalKey::Num8,
            Key::Num9 => CanonicalKey::Num9,
            Key::OEM3 => CanonicalKey::BackQuote,
            Key::OEMMinus => CanonicalKey::Minus,
            Key::OEMPlus => CanonicalKey::Equal,
            Key::OEM4 => CanonicalKey::LBracket,
            Key::OEM6 => CanonicalKey::RBracket,
            Key::OEM5 => CanonicalKey::BackSlash,
            Key::OEM1 => CanonicalKey::Semicolon,
            Key::OEM7 => CanonicalKey::Quote,
            Key::OEMComma => CanonicalKey::Comma,
            Key::OEMPeriod => CanonicalKey::Period,
            Key::OEM2 => CanonicalKey::Slash,
            Key::Space => CanonicalKey::Space,
            // Unknown keys -- 1
            _ => CanonicalKey::Unknown,
        }
    }
}

impl TryFrom<CanonicalKey> for Key {
    type Error = &'static str;

    fn try_from(value: CanonicalKey) -> Result<Self, Self::Error> {
        match value {
            // Function keys  -- 16
            CanonicalKey::Escape => Ok(Key::Escape),
            CanonicalKey::F1 => Ok(Key::F1),
            CanonicalKey::F2 => Ok(Key::F2),
            CanonicalKey::F3 => Ok(Key::F3),
            CanonicalKey::F4 => Ok(Key::F4),
            CanonicalKey::F5 => Ok(Key::F5),
            CanonicalKey::F6 => Ok(Key::F6),
            CanonicalKey::F7 => Ok(Key::F7),
            CanonicalKey::F8 => Ok(Key::F8),
            CanonicalKey::F9 => Ok(Key::F9),
            CanonicalKey::F10 => Ok(Key::F10),
            CanonicalKey::F11 => Ok(Key::F11),
            CanonicalKey::F12 => Ok(Key::F12),
            CanonicalKey::PrtSc => Ok(Key::Print),
            CanonicalKey::ScrLk => Ok(Key::Scroll),
            CanonicalKey::Pause => Ok(Key::Pause),
            // NumPad keys -- 17
            CanonicalKey::NumPad0 => Ok(Key::Numpad0),
            CanonicalKey::NumPad1 => Ok(Key::Numpad1),
            CanonicalKey::NumPad2 => Ok(Key::Numpad2),
            CanonicalKey::NumPad3 => Ok(Key::Numpad3),
            CanonicalKey::NumPad4 => Ok(Key::Numpad4),
            CanonicalKey::NumPad5 => Ok(Key::Numpad5),
            CanonicalKey::NumPad6 => Ok(Key::Numpad6),
            CanonicalKey::NumPad7 => Ok(Key::Numpad7),
            CanonicalKey::NumPad8 => Ok(Key::Numpad8),
            CanonicalKey::NumPad9 => Ok(Key::Numpad9),
            CanonicalKey::NumLock => Ok(Key::Numlock),
            CanonicalKey::NumPadDivide => Ok(Key::Divide),
            CanonicalKey::NumPadMultiply => Ok(Key::Multiply),
            CanonicalKey::NumPadMinus => Ok(Key::Subtract),
            CanonicalKey::NumPadPlus => Ok(Key::Add),
            CanonicalKey::NumPadEnter => Ok(Key::Separator),
            CanonicalKey::NumPadDot => Ok(Key::Decimal),
            // Navigation & Arrow keys -- 10
            CanonicalKey::Insert => Ok(Key::Insert),
            CanonicalKey::Delete => Ok(Key::Delete),
            CanonicalKey::Home => Ok(Key::Home),
            CanonicalKey::End => Ok(Key::End),
            CanonicalKey::PageUp => Ok(Key::PageUp),
            CanonicalKey::PageDown => Ok(Key::PageDown),
            CanonicalKey::ArrowUp => Ok(Key::UpArrow),
            CanonicalKey::ArrowDown => Ok(Key::DownArrow),
            CanonicalKey::ArrowLeft => Ok(Key::LeftArrow),
            CanonicalKey::ArrowRight => Ok(Key::RightArrow),
            // Modifier keys -- 13
            CanonicalKey::Tab => Ok(Key::Tab),
            CanonicalKey::CapsLock => Ok(Key::CapsLock),
            CanonicalKey::LShift => Ok(Key::LShift),
            CanonicalKey::RShift => Ok(Key::RShift),
            CanonicalKey::LCtrl => Ok(Key::LControl),
            CanonicalKey::RCtrl => Ok(Key::RControl),
            CanonicalKey::LAlt => Ok(Key::LMenu),
            CanonicalKey::RAlt => Ok(Key::RMenu),
            CanonicalKey::LMeta => Ok(Key::LWin),
            CanonicalKey::RMeta => Ok(Key::RWin),
            CanonicalKey::Menu => Ok(Key::Apps),
            CanonicalKey::Enter => Ok(Key::Return),
            CanonicalKey::Backspace => Ok(Key::Backspace),
            // Printable keys -- 48
            CanonicalKey::KeyA => Ok(Key::A),
            CanonicalKey::KeyB => Ok(Key::B),
            CanonicalKey::KeyC => Ok(Key::C),
            CanonicalKey::KeyD => Ok(Key::D),
            CanonicalKey::KeyE => Ok(Key::E),
            CanonicalKey::KeyF => Ok(Key::F),
            CanonicalKey::KeyG => Ok(Key::G),
            CanonicalKey::KeyH => Ok(Key::H),
            CanonicalKey::KeyI => Ok(Key::I),
            CanonicalKey::KeyJ => Ok(Key::J),
            CanonicalKey::KeyK => Ok(Key::K),
            CanonicalKey::KeyL => Ok(Key::L),
            CanonicalKey::KeyM => Ok(Key::M),
            CanonicalKey::KeyN => Ok(Key::N),
            CanonicalKey::KeyO => Ok(Key::O),
            CanonicalKey::KeyP => Ok(Key::P),
            CanonicalKey::KeyQ => Ok(Key::Q),
            CanonicalKey::KeyR => Ok(Key::R),
            CanonicalKey::KeyS => Ok(Key::S),
            CanonicalKey::KeyT => Ok(Key::T),
            CanonicalKey::KeyU => Ok(Key::U),
            CanonicalKey::KeyV => Ok(Key::V),
            CanonicalKey::KeyW => Ok(Key::W),
            CanonicalKey::KeyX => Ok(Key::X),
            CanonicalKey::KeyY => Ok(Key::Y),
            CanonicalKey::KeyZ => Ok(Key::Z),
            CanonicalKey::Num0 => Ok(Key::Num0),
            CanonicalKey::Num1 => Ok(Key::Num1),
            CanonicalKey::Num2 => Ok(Key::Num2),
            CanonicalKey::Num3 => Ok(Key::Num3),
            CanonicalKey::Num4 => Ok(Key::Num4),
            CanonicalKey::Num5 => Ok(Key::Num5),
            CanonicalKey::Num6 => Ok(Key::Num6),
            CanonicalKey::Num7 => Ok(Key::Num7),
            CanonicalKey::Num8 => Ok(Key::Num8),
            CanonicalKey::Num9 => Ok(Key::Num9),
            CanonicalKey::BackQuote => Ok(Key::OEM3),
            CanonicalKey::Minus => Ok(Key::OEMMinus),
            CanonicalKey::Equal => Ok(Key::OEMPlus),
            CanonicalKey::LBracket => Ok(Key::OEM4),
            CanonicalKey::RBracket => Ok(Key::OEM6),
            CanonicalKey::BackSlash => Ok(Key::OEM5),
            CanonicalKey::Semicolon => Ok(Key::OEM1),
            CanonicalKey::Quote => Ok(Key::OEM7),
            CanonicalKey::Comma => Ok(Key::OEMComma),
            CanonicalKey::Period => Ok(Key::OEMPeriod),
            CanonicalKey::Slash => Ok(Key::OEM2),
            CanonicalKey::Space => Ok(Key::Space),
            // Unknown keys -- 1
            CanonicalKey::Unknown => Err("Unknown key"),
        }
    }
}

impl From<MouseButton> for CanonicalButton {
    fn from(value: MouseButton) -> Self {
        match value {
            MouseButton::Left => CanonicalButton::Left,
            MouseButton::Middle => CanonicalButton::Middle,
            MouseButton::Right => CanonicalButton::Right,
            MouseButton::Back => CanonicalButton::Back,
            MouseButton::Forward => CanonicalButton::Forward,
            _ => CanonicalButton::Unknown,
        }
    }
}

impl TryFrom<CanonicalButton> for MouseButton {
    type Error = &'static str;

    fn try_from(value: CanonicalButton) -> Result<Self, Self::Error> {
        match value {
            CanonicalButton::Left => Ok(MouseButton::Left),
            CanonicalButton::Middle => Ok(MouseButton::Middle),
            CanonicalButton::Right => Ok(MouseButton::Right),
            CanonicalButton::Back => Ok(MouseButton::Back),
            CanonicalButton::Forward => Ok(MouseButton::Forward),
            CanonicalButton::Unknown => Err("Unknown button"),
        }
    }
}